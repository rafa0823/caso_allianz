---
title: "Caso Allianz"
title-slide-attributes:
  data-background-image: allianz-arena.jpeg
  data-background-opacity: "0.5"
warning: false
format:
  revealjs:
    pagetitle: "Data Minning 2"
    scrollable: false
    slide-number: true
    show-slide-number: all
    logo: allianz.png
    theme:
      - _extensions/grantmcdermott/clean/clean.scss
    transition: slide
    menu: false 
    footer: "Los amigos del 7.5"
    code-fold: true
execute:
  echo: false
self-contained: true
---

```{python}
#| echo: false
#| include: false
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder, OrdinalEncoder
from sklearn.cluster import KMeans
```

```{python}
#| echo: false
#| include: false
#| cache: true
df = pd.read_csv("data-raw/bd_allianz.csv")
df.info()
duplicadas = df[df.duplicated()]

print("\nFilas duplicadas:")
print(duplicadas)

df = df.drop_duplicates()
df.shape
```

```{python}
#| include: false
#| echo: false
# Convert to list if it's not already
convertir = df.select_dtypes(exclude=['float64', 'int64']).columns.tolist()

# Add a new element
convertir.extend(['Customer_ID', "Is_direct_debit"])

df[convertir] = df[convertir].apply(lambda x: x.astype('category'))

df["Broker_cor"] = df["Broker_cor"].str.replace(',', '').astype("float64")

palette={1: "#003781", 0: "#219ebc"} 

rc = {'figure.figsize':(10,6),
      'axes.facecolor':'white',
      'axes.grid' : False,
      'font.family':'Arial',
      'font.size' : 15}
plt.rcParams.update(rc)
```

## Objetivos 

::: {.incremental}

* Entender el comportamiento de clientes y brokers
* Segmentación de clientes
* Predecir qué clientes adoptarán la domicialización de pagos y cuáles sus principales características

:::

# Comportamiento de clientes {background-color=#219ebc backgroun-opacity=0.8}

## Solo el 21% de los clientes tiene domiciliación

```{python}
#| cache: true
plt.figure(figsize=(9, 5))
ax = plt.gca()
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
sns.countplot(data=df, x="Is_direct_debit", hue = "Is_direct_debit", palette=palette, legend=False)
ax.set_xticklabels(["No", "Sí"])
plt.xlabel("Domicialización")
plt.ylabel("Número de cuentas")
plt.title("Distribución de cuentas domiciliadas")
plt.show()
```

```{python}
#| include: false
cat_cols = df.select_dtypes(include = "category").columns
cat_cols = cat_cols.drop(labels=['Broker_account_number', 'Contract_number', 'Customer_ID'])
```

## Distribución de variables categóricas {.scrollable}

```{python}
#| label: gráficos
#| cache: true
# Set up the figure and axes for six subplots (3 rows, 2 columns)
categorical_vars = ['Customer_type', 'Customer_age', 'Customer_region', 
                    'Customer_urbanization', 'Broker_urbanization', 'Payment_frequency', 
                    'Line_of_business']

# Set up the layout for multiple bar charts
for var in categorical_vars:
    plt.figure(figsize=(10, 6))
    df[var].value_counts().plot(kind='bar',color=palette[1])
    plt.title(f'Distribution of {var}')
    plt.xlabel(var)
    plt.ylabel('Número de cuentas')
    plt.xticks(rotation=45)
    ax = plt.gca()
    ax.spines["top"].set_visible(False)
    ax.spines["right"].set_visible(False)
    plt.show()

```

## Características generales de las cuentas 

Los clientes de Allianz son principalmente Personas físicas de mediana edad que habitan principalmente en la región rural de Flandes quienes prefieren contratar sus seguros de auto con póliza anual.

::: {.absoute left=200}

![](clientes.jpeg) 

:::

## Medición del desempeño de los brokers

```{python}
#| include: false
#| cache: true
scaler = StandardScaler()
df["Broker_cor_scaled"] = scaler.fit_transform(df[["Broker_cor"]])
```

```{python}
plt.figure(figsize=(10, 6))
sns.violinplot(data=df, x="Broker_cor_scaled", color=palette[1])
plt.title("Distribución del Índice de Rentabilidad del Corredor")
plt.xlabel("Índice de rentabilidad")
ax = plt.gca()
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)
plt.show()
```

# Segmentación de clientes {background-color=#219ebc backgroun-opacity=0.8}

```{python}
#| include: false
#| cache: true
# Selecting relevant variables for clustering

data_clustering = df[['Annual_premium', 'Payment_frequency', 'Is_direct_debit', 
                        'Customer_type', 'Customer_region', 'Customer_age']].copy()

# Mapeo de la variable 'Customer_age' si viene en intervalos
age_mapping = {"No age": 0, "C = 30-39": 1, "D = 40-69": 2, "S = +69": 3}
data_clustering['Customer_age'] = df['Customer_age'].map(age_mapping)

# Imputación de valores faltantes en 'Customer_age' usando la mediana
data_clustering['Customer_age'].fillna(data_clustering['Customer_age'].median(), inplace=True)

# Codificación de variables categóricas
label_columns = ['Payment_frequency', 'Customer_type', 'Customer_region']
for col in label_columns:
    data_clustering[col] = data_clustering[col].astype('category').cat.codes
    
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_clustering)

kmeans_4_clusters = KMeans(n_clusters=4, random_state=42)
data_clustering['Cluster'] = kmeans_4_clusters.fit_predict(data_scaled)

data_clustering["Is_direct_debit"] = data_clustering["Is_direct_debit"].astype("float")

cluster_descriptions = data_clustering.groupby('Cluster').mean()
print(cluster_descriptions)
```

## Clasificación de clientes {.smaller}

* **Grupo 0:** Clientes con prima anual baja (428.08) y pagos frecuentes. Predominan los clientes de tipo 1 con domiciliación bancaria y se encuentran en una variedad de regiones. La edad promedio está en el intervalo de 40-69 años.

* **Grupo 1:** Clientes con una prima anual muy baja (289.56) y sin domiciliación bancaria. Son principalmente del tipo 1 y presentan una edad promedio también en el rango de 40-69 años.

* **Grupo 2:** Clientes con una prima anual extremadamente alta (aproximadamente 3 millones), sin domiciliación bancaria y de tipo 0, lo que podría representar grandes empresas o cuentas de alto valor. Este grupo tiene una edad promedio desconocida o no especificada.

* **Grupo 3:** Clientes con una prima anual media (1361.31), pagos anuales en su mayoría y una baja proporción de domiciliación bancaria. Son principalmente del tipo 0, con una edad promedio no especificada o en un rango más bajo.


# Predicción de clientes y análisis de principales características {background-color=#219ebc backgroun-opacity=0.8}

## Características Principales
### Regresión logística
A pesar de que solo el 4% de los clientes contratan poliza semestral, tiene gran importancia en este modelo

```{python}
data = {
    "Feature": [
        "Payment_frequency_Semi-annually",
        "Product_type_A08 - TRPT AGR",
        "Broker_account_number_UTAY893976000598587",
        "Customer_segment_Retail",
        "Product_type_A05 - CYCLO",
        "Payment_frequency_Quarterly",
        "Broker_account_number_WIGT39999791589661",
        "Broker_account_number_LMUX8426177618576",
        "Broker_account_number_MKDP7583896811338",
        "Line_of_business_N - Accident"
    ],
    "Absolute Coefficient": [
        4.175060,
        3.086581,
        2.171210,
        1.971717,
        1.902525,
        1.847862,
        1.721719,
        1.673963,
        1.655654,
        1.601209
    ]
}

# Convertir los datos a un DataFrame
df_coefficients = pd.DataFrame(data)

# Ordenar los coeficientes de mayor a menor
df_coefficients = df_coefficients.sort_values("Absolute Coefficient", ascending=False)

# Normalizar los coeficientes absolutos para el mapeo de color
norm = plt.Normalize(df_coefficients['Absolute Coefficient'].min(), df_coefficients['Absolute Coefficient'].max())
cmap = plt.get_cmap("Blues")  # Paleta de colores "Blues" para el degradado

# Crear una gráfica de barras con el mapeo de colores
plt.figure(figsize=(10, 5))  # Aumentar el tamaño de la figura para más espacio
bars = sns.barplot(x="Absolute Coefficient", y="Feature", data=df_coefficients, color=palette[1], edgecolor="none")

# Aplicar degradado a las barras usando el valor normalizado
for bar in bars.patches:
    # Asignar un color que varía del 0.3 (oscuro) al 0.8 (menos oscuro)
    bar.set_facecolor(cmap(0.3 + 0.5 * norm(bar.get_width())))
    # Añadir el valor del coeficiente en el centro de cada barra en blanco, negritas y tamaño mayor
    bars.text(
        bar.get_width() - 0.1,  # Posición x (ajustada para que no esté pegada al borde)
        bar.get_y() + bar.get_height() / 2,  # Posición y
        f'{bar.get_width():.2f}',  # Formato del coeficiente
        ha='right',  # Alinear a la derecha
        va='center',  # Alinear verticalmente al centro
        fontsize=14, color="white", fontweight="bold"  # Fuente más grande, color blanco, y en negritas
    )

# Personalizar el gráfico con letras más grandes
plt.title("Característica más importantes", fontsize=20)  # Título más grande
plt.xlabel("Absolute Coefficient", fontsize=16)  # Etiqueta del eje X más grande
plt.ylabel("Características", fontsize=16)  # Etiqueta del eje Y más grande

# Asegurar que las etiquetas de las barras sean legibles
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.show()
```

## Características principales
### Random Forest

En este modelo, aquellos clientes con un valor de póliza premium (por arriba de los 541 eur) es la variable que explica mejor el modelo.

```{python}
data = {
    "Feature": [
        "Annual_premium",
        "Broker_cor_scaled",
        "Payment_frequency_Semi-annually",
        "Customer_age_No age",
        "Payment_frequency_Quarterly",
        "Customer_urbanization_Urban",
        "Customer_age_S = +69",
        "Customer_type_Physical person",
        "Customer_segment_Retail",
        "Customer_age_D = 40-69"
    ],
    "Importance": [
        0.369690,
        0.031248,
        0.024664,
        0.018388,
        0.018188,
        0.015378,
        0.015249,
        0.013031,
        0.011919,
        0.011679
    ]
}

# Convertir los datos a un DataFrame
df_importance = pd.DataFrame(data)

# Ordenar las importancias de mayor a menor
df_importance = df_importance.sort_values("Importance", ascending=False)

# Normalizar las importancias para el mapeo de color
norm = plt.Normalize(df_importance['Importance'].min(), df_importance['Importance'].max())
cmap = plt.get_cmap("Blues")  # Paleta de colores "Blues" para el degradado

# Crear una gráfica de barras con el mapeo de colores
plt.figure(figsize=(10, 5))  # Aumentar el tamaño de la figura para más espacio
bars = sns.barplot(x="Importance", y="Feature", data=df_importance, palette="Blues", edgecolor="none")

# Aplicar degradado a las barras usando el valor normalizado
for bar in bars.patches:
    # Asignar un color que varía del 0.3 (oscuro) al 0.8 (menos oscuro)
    bar.set_facecolor(cmap(0.3 + 0.5 * norm(bar.get_width())))
    
    # Mostrar el valor dentro de la barra solo para "Annual_premium"
    if bar.get_y() == df_importance[df_importance["Feature"] == "Annual_premium"].index[0]:
        bars.text(
            bar.get_width() - 0.005,  # Posición x (ajustada para que no esté pegada al borde)
            bar.get_y() + bar.get_height() / 2,  # Posición y
            f'{bar.get_width():.5f}',  # Formato del valor de importancia con cinco decimales
            ha='right',  # Alinear a la derecha
            va='center',  # Alinear verticalmente al centro
            fontsize=14, color="white"  # Fuente y color de la etiqueta en blanco, tamaño aumentado
        )
    else:
        # Para las demás barras, mostrar el valor fuera, al final de la barra
        bars.text(
            bar.get_width() + 0.002,  # Posición x para que esté fuera de la barra
            bar.get_y() + bar.get_height() / 2,  # Posición y
            f'{bar.get_width():.2f}',  # Formato del valor de importancia con cinco decimales
            ha='left',  # Alinear a la izquierda
            va='center',  # Alinear verticalmente al centro
            fontsize=14, color="black"  # Fuente y color de la etiqueta en negro, tamaño aumentado
        )

# Personalizar el gráfico con letras más grandes
plt.title("Características más importantes", fontsize=20)  # Título más grande
plt.xlabel("Importancia", fontsize=16)  # Etiqueta del eje X más grande
plt.ylabel("Característica", fontsize=16)  # Etiqueta del eje Y más grande

# Asegurar que las etiquetas de las barras sean legibles
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)

# Eliminar los bordes superior y derecho
ax = plt.gca()
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.show()

```

## Conclusiones {.smaller}

:::{.incremental}

* **Estrategia 1:** Segmentar clientes de Allianz, identificando a todos los clientes que paguen semestralemente
  * Acción táctica: *Campaña vìa Notificaciòn Push-Mailling* Ofertando un 5% de descuento en el valor total de su prima si domicilian su pago
  * Acción táctica 2: *Campaña de pagos flexibles* Darles la opción de pago mensual o trimestral (no solo semestral) para que puedan tener mejor flujo de su efectivo
* **Estrategia 2:** Segmentar e identificar a aquellos clientes con pólizas premium (y que estén pagando anual)
  * Acción tácticas 1: Camapaña vía notificación *Push-Mailling* acercamiento de Broker para ofertar un plan de lealtad, al domiciliarse, podrà ganar puntos que podrá canjear por artìculos exclusivos en la página de Allianz.com
  * Acción táctica 2. Plan de cobertura extendida. Al domiciliarse podrán obtener servicios adicionales a lo contratado a su póliza, por ejemplo, si es de auto, un viaje en grúa adicional, o asesoría legal.
  
:::  

# Anexo

## Método del codo para selección de grupos

```{python}
wcss = []
max_clusters = 10  # Test clusters from 1 to 10
for i in range(1, max_clusters + 1):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(data_scaled)
    wcss.append(kmeans.inertia_)

# Plotting the Elbow Method chart
plt.figure(figsize=(10, 5))
plt.plot(range(1, max_clusters + 1), wcss, marker='o')
plt.title('Método del Codo para Determinar el Número de Clusters')
plt.xlabel('Número de Clusters')
plt.ylabel('Suma de Cuadrados Internos de los Clusters (WCSS)')
plt.show()

```

## Evaluación de modelos {.scrollable}
### Regresión logística con undersampling

![](cm_lr.jpeg)
![Curva ROC](roc_lr.jpeg)

## Evaluación de modelos {.scrollable}
### Random forest con undersampling

![](cm_rf.jpeg)
![](roc_rf.jpeg)
